{"version":3,"sources":["webpack:///../docs/live-editor.jsx","webpack:///../docs/playground.mdx","webpack:///../src/index.js"],"names":["Editor","code","trim","scope","ReactTimer","style","caretColor","background","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","isMDXComponent","value","componentDidMount","this","onTick","interval","end","onEnd","timer","setInterval","currentValue","clearInterval","componentWillUnmount","render","children","Component"],"mappings":"6LASMA,EAAS,WAcb,OACE,YAAC,IAAD,CAAcC,KATN,mOASiBC,OAAQC,MAAO,CAAEC,iBACxC,mBAAKC,MAfe,CACtBC,WAAY,QACZC,WAAY,oBAcR,YAAC,IAAD,OAEF,uBACE,YAAC,IAAD,MACA,YAAC,IAAD,SAMOP,I,4bC3BR,IAAMQ,EAAe,Q,oKAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,cADR,cAGA,6DAEA,YAAC,EAAD,CAAQA,QAAQ,Y,2JAKpBH,EAAWI,gBAAiB,G,qDClCtBZ,E,oBACJ,cAAoB,IAAD,SACjB,wBACA,MAAa,CACXa,MAAOH,SAAe,GAExB,aALiB,E,kHAQnBI,6BAAqB,IAAD,SAMdC,KANc,MAEhBC,EAFgB,SAGhBC,EAHgB,WAIhBC,EAJgB,MAKhBC,EALgB,QAOlBJ,KAAKK,MAAQC,aAAY,WACvB,YAAc,gBAAGR,EAAH,cACZ,CAAEA,MAAOG,EAAOH,OACf,WAAO,IACOS,EAAiB,EADzB,YAEHJ,EAAJ,KACEK,cAAc,EAAdA,OACAJ,WAPN,I,EAaFK,gCACMT,KAAJ,OACEQ,cAAcR,KAAdQ,Q,EAIJE,kBAGE,OAAOC,EAFcX,KADd,gBAEWA,KAFX,c,GAnCcY,aA0CzB3B,eAA0B,CACxBiB,SADwB,IAExBE,MAAO,aACPH,OAAQ,cAYV,W","file":"component---docs-playground-mdx-98e6fae1ca0272653e09.js","sourcesContent":["import React from 'react';\nimport {\n  LiveProvider,\n  LiveEditor,\n  LiveError,\n  LivePreview,\n} from 'react-live';\nimport ReactTimer from '../src/index';\n\nconst Editor = () => {\n  const liveEditorStyle = {\n    caretColor: 'white',\n    background: 'rgb(32, 35, 42)',\n  };\n\n  const code = `\n    <ReactTimer\n    start={0}\n    end={(value) => value === 30}\n    onEnd={(value) => console.log('ENDED WITH VALUE', value)}\n    onTick={(value) => value + 1}>\n        {(time) => <div>{time}</div>}\n    </ReactTimer>`;\n  return (\n    <LiveProvider code={code.trim()} scope={{ ReactTimer }}>\n      <div style={liveEditorStyle}>\n        <LiveEditor />\n      </div>\n      <div>\n        <LiveError />\n        <LivePreview />\n      </div>\n    </LiveProvider>\n  );\n};\n\nexport default Editor;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/xendora/react-timer/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport Editor from './live-editor';\nimport ReactTimer from '../src/index';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"playground\"\n    }}>{`Playground`}</h1>\n    <p>{`Test your own timer component here: `}</p>\n\n    <Editor mdxType=\"Editor\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ReactTimer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.start || 0,\n    };\n    this.timer = null;\n  }\n\n  componentDidMount() {\n    const {\n      onTick,\n      interval,\n      end,\n      onEnd,\n    } = this.props;\n    this.timer = setInterval(() => {\n      this.setState(({ value }) => (\n        { value: onTick(value) }\n      ), () => {\n        const { value: currentValue } = this.state;\n        if (end(currentValue)) {\n          clearInterval(this.timer);\n          onEnd(currentValue);\n        }\n      });\n    }, interval);\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  }\n\n  render() {\n    const { children } = this.props;\n    const { value } = this.state;\n    return children(value);\n  }\n}\n\nReactTimer.defaultProps = {\n  interval: 1000,\n  onEnd: () => { },\n  onTick: () => { },\n};\n\nReactTimer.propTypes = {\n  children: PropTypes.func.isRequired,\n  start: PropTypes.number.isRequired,\n  end: PropTypes.func.isRequired,\n  interval: PropTypes.number,\n  onTick: PropTypes.func,\n  onEnd: PropTypes.func,\n};\n\nexport default ReactTimer;\n"],"sourceRoot":""}